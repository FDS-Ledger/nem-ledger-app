#!/usr/bin/env python
# *******************************************************************************
# *   Ledger Blue
# *   (c) 2020 Ledger
# *   (c) 2020 FDS
# *
# *  Licensed under the Apache License, Version 2.0 (the "License");
# *  you may not use this file except in compliance with the License.
# *  You may obtain a copy of the License at
# *
# *      http://www.apache.org/licenses/LICENSE-2.0
# *
# *  Unless required by applicable law or agreed to in writing, software
# *  distributed under the License is distributed on an "AS IS" BASIS,
# *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# *  See the License for the specific language governing permissions and
# *  limitations under the License.
# ********************************************************************************
from ledgerblue.comm import getDongle
from ledgerblue.commException import CommException

TESTNET=152
MAINNET=104
MIJIN_MAINNET=96
MIJIN_TESTNET=144

BIPP32_LENGTH = 20
bipp32_path = (
      "8000002C"
    + "8000002B"
    + "%s"
    + "80000000"
    + "80000000")

APDU_GET_ACCOUNT = "E0020180"
APDU_SIGN_TX = "E0049080"

dongle = getDongle(True)

def to_hex(i):
    str = '%x' % i
    if len(str) % 2 == 1:
        str = "0" + str
    print(str)
    return str

def get_network_bipp32(network_type):
    return hex(0x80000000 | network_type).lstrip("0x")

def get_bipp32_path(network_type):
    return bipp32_path % (get_network_bipp32(network_type))

def send_package(network_type, apdu_hex, data_hex=None):
    tx_len = to_hex(BIPP32_LENGTH+1)
    if data_hex:
        tx_len = to_hex(BIPP32_LENGTH + 1 + int(len(data_hex)/2))
    else:
        data_hex = ""
    bipp32 = get_bipp32_path(network_type)
    result = dongle.exchange(bytes(bytearray.fromhex(apdu_hex + tx_len + to_hex(int(BIPP32_LENGTH/4)) + bipp32 + data_hex)))
    print("Result len: " + str(len(result)))
    if apdu_hex == APDU_SIGN_TX:
        print("Signature: " + result.hex().upper())
    elif apdu_hex == APDU_GET_ACCOUNT:
        print("Address [" + str(result[0]) + "] " + result[1:41].decode())
        print("PublicKey [" + str(result[41]) + "] " + result[42:74].hex().upper())
    return result

def verify_address(network_type):
    result = send_package(network_type, APDU_GET_ACCOUNT)

def sign_transfer_tx(network_type):
    # raw_tx = "E004908096058000002C8000002B8000009880000000800000000101000001000098B005690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DA086010000000000C013690A2800000054424535365A374D4C515A34533735354A5A4C34365652594D374F443337534C5047465A504F354F404B4C00000000000D00000001000000050000007474657374"
    TXN =  "0101000001000098B005690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DA086010000000000C013690A2800000054424535365A374D4C515A34533735354A5A4C34365652594D374F443337534C5047465A504F354F404B4C00000000000D00000001000000050000007474657374"
    result = send_package(network_type, APDU_SIGN_TX, TXN)

def sign_multiple_mosaic_tx(network_type):
    TXN = "010100000200009888AF640A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF04902000000000098BD640A2800000054423749423644534A4B57425651454B3750443754574F3636454357354C59365349534D32434A4A40420F000000000014000000010000000C00000054657374206D657373616765020000001A0000000E000000030000006E656D0300000078656D40420F0000000000200000001400000007000000746573746E657405000000746F6B656E0100000000000000"
    # TXN = "01010000020000988161d007200000003e6e6cbac488b8a44bdf5abf27b9e1cc2a6f20d09d550a66b9b36f525ca222eef049020000000000916fd007280000005441353435494341564e45554446554249484f3343454a425356495a37595948464658354c51505440420f00000000001b00000001000000130000004d6f7361696373207472616e73616374696f6e020000001a0000000e000000030000006e656d0300000078656d8096980000000000290000001d0000000f0000007861726c6565636d2e7a6f646961630600000067656d696e690a00000000000000"
    result = send_package(network_type, APDU_SIGN_TX, TXN)

# def sign_importance_transfer_tx(network_type):
#     TXN = "01080000010000989b5cd007200000003e6e6cbac488b8a44bdf5abf27b9e1cc2a6f20d09d550a66b9b36f525ca222eea086010000000000ab6ad00701000000020000006da3760713019e26b186243ab6ecba9f70784c59923d689ab54d4b2bf0e20f5d"
#     result = send_package(network_type, APDU_SIGN_TX, TXN)

def sign_create_namespace_tx(network_type):
    # raw_tx = "E0049080A8058000002C8000002B8000009880000000800000000120000001000098F30C690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF049020000000000031B690A2800000054414D4553504143455748344D4B464D42435646455244504F4F5034464B374D54444A4559503335809698000000000013000000746573745F6E616D6573706163655F6E616D6508000000746573745F6E656D"
    TXN = "0120000001000098F30C690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF049020000000000031B690A2800000054414D4553504143455748344D4B464D42435646455244504F4F5034464B374D54444A4559503335809698000000000013000000746573745F6E616D6573706163655F6E616D6508000000746573745F6E656D"
    result = send_package(network_type, APDU_SIGN_TX, TXN)

def sign_create_mosaic_tx(network_type):

    TXN2 = "E00480805874727565180000000C0000007472616E7366657261626C650400000074727565000000002800000054424D4F534149434F443446353445453543444D523233434342474F414D3258534A4252354F4C438096980000000000"
    result = dongle.exchange(bytes(bytearray.fromhex(TXN1)))
    result = dongle.exchange(bytes(bytearray.fromhex(TXN2)))

def sign_create_mosaic_levy_tx(network_type):

    TXN2 = "E0048080A274727565180000000C0000007472616E7366657261626C6504000000747275654A000000010000002800000054423749423644534A4B57425651454B3750443754574F3636454357354C59365349534D32434A4A0E000000030000006E656D0300000078656D05000000000000002800000054424D4F534149434F443446353445453543444D523233434342474F414D3258534A4252354F4C438096980000000000"
    result = dongle.exchange(bytes(bytearray.fromhex(TXN1)))
    result = dongle.exchange(bytes(bytearray.fromhex(TXN2)))

def sign_multisig_aggregate_modification_tx(network_type):
    # raw_tx_aggregate_transaction_modification = "E0049080C1058000002C8000002B80000098800000008000000004100000010000988B0B690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF0490200000000009B19690A6C00000001100000010000988B0B690A20000000180158D9FEED1711FBFC7718ED144275311DCFD10A4480035D1856CDAC7242AB20A10700000000009B19690A01000000280000000100000020000000A581459B8F16974E59B110FCA581EE1FFD140A8C42B9ECDFFC316D722F0CDA35"
    TXN = "04100000010000988B0B690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF0490200000000009B19690A6C00000001100000010000988B0B690A20000000180158D9FEED1711FBFC7718ED144275311DCFD10A4480035D1856CDAC7242AB20A10700000000009B19690A01000000280000000100000020000000A581459B8F16974E59B110FCA581EE1FFD140A8C42B9ECDFFC316D722F0CDA35"
    result = send_package(network_type, APDU_SIGN_TX, TXN)

def sign_multisig_aggregate_modification_2_tx(network_type):
    # raw_tx_aggregate_transaction_modification = "E0049080C9058000002C8000002B80000098800000008000000004100000010000985612690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF0490200000000006620690A7400000001100000020000985612690A20000000180158D9FEED1711FBFC7718ED144275311DCFD10A4480035D1856CDAC7242AB20A10700000000006620690A01000000280000000100000020000000A581459B8F16974E59B110FCA581EE1FFD140A8C42B9ECDFFC316D722F0CDA350400000001000000"
    TXN = "04100000010000985612690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF0490200000000006620690A7400000001100000020000985612690A20000000180158D9FEED1711FBFC7718ED144275311DCFD10A4480035D1856CDAC7242AB20A10700000000006620690A01000000280000000100000020000000A581459B8F16974E59B110FCA581EE1FFD140A8C42B9ECDFFC316D722F0CDA350400000001000000"
    result = send_package(network_type, APDU_SIGN_TX, TXN)

def sign_multisig_aggregate_modification_3_tx(network_type):
    # raw_tx_aggregate_transaction_modification = "E0049080C9058000002C8000002B80000098800000008000000004100000010000989412690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF049020000000000A420690A7400000001100000020000989412690A20000000180158D9FEED1711FBFC7718ED144275311DCFD10A4480035D1856CDAC7242AB20A1070000000000A420690A01000000280000000100000020000000A581459B8F16974E59B110FCA581EE1FFD140A8C42B9ECDFFC316D722F0CDA3504000000FFFFFFFF"
    TXN = "04100000010000989412690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF049020000000000A420690A7400000001100000020000989412690A20000000180158D9FEED1711FBFC7718ED144275311DCFD10A4480035D1856CDAC7242AB20A1070000000000A420690A01000000280000000100000020000000A581459B8F16974E59B110FCA581EE1FFD140A8C42B9ECDFFC316D722F0CDA3504000000FFFFFFFF"
    result = send_package(network_type, APDU_SIGN_TX, TXN)

def sign_multisig_create_namespace_tx(network_type):
    # raw_tx_aggregate_transaction_modification = "E0049080DB058000002C8000002B8000009880000000800000000410000001000098C40F690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF049020000000000D41D690A860000000120000001000098C40F690A20000000180158D9FEED1711FBFC7718ED144275311DCFD10A4480035D1856CDAC7242ABF049020000000000D41D690A2800000054414D4553504143455748344D4B464D42435646455244504F4F5034464B374D54444A455950333500E1F505000000000E000000746573745F6E616D657370616365FFFFFFFF"
    TXN = "0410000001000098C40F690A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF049020000000000D41D690A860000000120000001000098C40F690A20000000180158D9FEED1711FBFC7718ED144275311DCFD10A4480035D1856CDAC7242ABF049020000000000D41D690A2800000054414D4553504143455748344D4B464D42435646455244504F4F5034464B374D54444A455950333500E1F505000000000E000000746573745F6E616D657370616365FFFFFFFF"
    result = send_package(network_type, APDU_SIGN_TX, TXN)

def sign_multisig_create_mosaic_tx(network_type):

    TXN2 = "E0048080986962696C6974790100000032170000000D000000696E697469616C537570706C79020000003132190000000D000000737570706C794D757461626C650400000074727565180000000C0000007472616E7366657261626C650400000074727565000000002800000054424D4F534149434F443446353445453543444D523233434342474F414D3258534A4252354F4C438096980000000000"
    result = dongle.exchange(bytes(bytearray.fromhex(TXN1)))
    result = dongle.exchange(bytes(bytearray.fromhex(TXN2)))

def sign_multisig_create_mosaic_levy_tx(network_type):
    # not supported yet in old wallet version
    print("not supportted yet in old wallet version")

###### def sign_multisig_signature_transaction(network_type):
######     TXN = "02100000010000989c5fd007200000003e6e6cbac488b8a44bdf5abf27b9e1cc2a6f20d09d550a66b9b36f525ca222eef049020000000000ac6dd0072400000020000000d2c70f814fa87b13da000ca42e52085fa233ce0aae718aaefe16c5652d1a6932280000005443453752474f444a354d4c4d354d43564e43495253575445484d4c594545465459355442585142"
######     result = send_package(network_type, APDU_SIGN_TX, TXN)

# verify_address(TESTNET)
sign_transfer_tx(TESTNET)
# sign_multiple_mosaic_tx(TESTNET)
# #################sign_importance_transfer_tx(TESTNET)
# sign_create_namespace_tx(TESTNET)
# sign_create_mosaic_tx(TESTNET)
# sign_create_mosaic_levy_tx(TESTNET)
sign_multisig_aggregate_modification_tx(TESTNET)
sign_multisig_aggregate_modification_2_tx(TESTNET)
sign_multisig_aggregate_modification_3_tx(TESTNET)
sign_multisig_create_namespace_tx(TESTNET)
sign_multisig_create_mosaic_tx(TESTNET)
sign_multisig_create_mosaic_levy_tx(TESTNET)
# sign_multisig_create_mosaic_tx(TESTNET)
# sign_multisig_signature_transaction(TESTNET)
