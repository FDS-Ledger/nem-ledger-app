#!/usr/bin/env python
# *******************************************************************************
# *   Ledger Blue
# *   (c) 2020 Ledger
# *   (c) 2020 FDS
# *
# *  Licensed under the Apache License, Version 2.0 (the "License");
# *  you may not use this file except in compliance with the License.
# *  You may obtain a copy of the License at
# *
# *      http://www.apache.org/licenses/LICENSE-2.0
# *
# *  Unless required by applicable law or agreed to in writing, software
# *  distributed under the License is distributed on an "AS IS" BASIS,
# *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# *  See the License for the specific language governing permissions and
# *  limitations under the License.
# ********************************************************************************
from ledgerblue.comm import getDongle
from ledgerblue.commException import CommException

TESTNET=152
MAINNET=104
MIJIN_MAINNET=96
MIJIN_TESTNET=144

bipp32_path = (
      "8000002C"
    + "8000002B"
    + "%s"
    + "80000000"
    + "80000000")

apdu_get_account = "E0020180"
apdu_sign_tx = "E0040080"
dongle = getDongle(True)

def get_network_bipp32(network_type):
    return hex(0x80000000 | network_type).lstrip("0x")

def get_bipp32_path(network_type):
    return bipp32_path % (get_network_bipp32(network_type))

def send_package(data):
    result = dongle.exchange(data)
    print("Result len: " + str(len(result)))
    return result

def verify_address(network_type):
    bipp32_path_len = "1505"
    bipp32 = get_bipp32_path(network_type)
    result = send_package(bytes(bytearray.fromhex(apdu_get_account + bipp32_path_len + bipp32)))
    print("Address respond     [" + str(result[0]) + "] " + result[1:41].decode())
    print("PublicKey respond   [" + str(result[41]) + "] " + result[42:74].hex().upper())

def sign_transfer_tx(network_type):
    # bipp32 = get_bipp32_path(network_type)
    # TEST_TX =  "01010000010000989b5cd007200000003e6e6cbac488b8a44bdf5abf27b9e1cc2a6f20d09d550a66b9b36f525ca222eea086010000000000ab6ad007280000005441353435494341564e45554446554249484f3343454a425356495a37595948464658354c51505440420f00000000002000000001000000180000005369676e20746573746e6574207472616e73616374696f6e"
    # result = send_package(bytes(bytearray.fromhex(apdu_sign_tx + str(len(bipp32_path) + 1 + len(TEST_TX) + len(bipp32_path)/4, 'hex') + bipp32_path + TEST_TX)))
    # print(len(bipp32_path) + 1 + len(TEST_TX) + len(bipp32_path)/4)
    transfer_tx = "E0040080A9058000002C8000002B80000098800000008000000001010000010000989B5CD007200000003E6E6CBAC488B8A44BDF5ABF27B9E1CC2A6F20D09D550A66B9B36F525CA222EEA086010000000000AB6AD007280000005441353435494341564E45554446554249484F3343454A425356495A37595948464658354C51505440420F00000000002000000001000000180000005369676E20746573746E6574207472616E73616374696F6E"
    send_package(bytes(bytearray.fromhex(transfer_tx)))
# verify_address(TESTNET)

def sign_multiple_mosaic_tx(network_type):
    send_multiple_mosaic = "E0040080E3058000002C8000002B800000988000000080000000010100000200009888AF640A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF04902000000000098BD640A2800000054423749423644534A4B57425651454B3750443754574F3636454357354C59365349534D32434A4A40420F000000000014000000010000000C00000054657374206D657373616765020000001A0000000E000000030000006E656D0300000078656D40420F0000000000200000001400000007000000746573746E657405000000746F6B656E0100000000000000"
    send_package(bytes(bytearray.fromhex(send_multiple_mosaic)))
def sign_create_namespace_tx(network_type):
    namespace = "E0040080A7058000002C8000002B8000009880000000800000000120000001000098C7AF640A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF049020000000000D7BD640A2800000054414D4553504143455748344D4B464D42435646455244504F4F5034464B374D54444A4559503335809698000000000012000000746573745F6E616D6573706163655F6E616D08000000746573745F6E656D"
    send_package(bytes(bytearray.fromhex(namespace)))
def sign_create_mosaic_tx(network_type):
    create_mosaic1 = "E0048080FF058000002C8000002B80000098800000008000000001400000010000987AB0640A200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183DF0490200000000008ABE640AD8000000200000009F96DF7E7A639B4034B8BEE5B88AB1D640DB66EB5A47AFE018E320CB130C183D2000000008000000746573745F6E656D100000006D6F736169635F746573745F6E616D65170000007468697320697320746865206465736372697074696F6E04000000150000000C00000064697669736962696C6974790100000034170000000D000000696E697469616C537570706C79020000003235190000000D000000737570706C794D"
    create_mosaic2 = "E004018062757461626C650400000074727565180000000C0000007472616E7366657261626C650400000074727565000000002800000054424D4F534149434F443446353445453543444D523233434342474F414D3258534A4252354F4C438096980000000000"
def sign_create_mosaic_levy_tx(network_type):
    create_mosaic_with_levy
    create_mosaic_with_levy_2 = "E0040180AC757461626C650400000074727565180000000C0000007472616E7366657261626C6504000000747275654A000000010000002800000054423749423644534A4B57425651454B3750443754574F3636454357354C59365349534D32434A4A0E000000030000006E656D0300000078656D09000000000000002800000054424D4F534149434F443446353445453543444D523233434342474F414D3258534A4252354F4C438096980000000000"
    send_package(bytes(bytearray.fromhex(create_mosaic_with_levy_1)))
    send_package(bytes(bytearray.fromhex(create_mosaic_with_levy_2)))


sign_transfer_tx(TESTNET)
# sign_multiple_mosaic_tx(TESTNET)
# sign_create_namespace_tx(TESTNET)
# sign_create_mosaic_tx(TESTNET)
# sign_create_mosaic_levy_tx(TESTNET)